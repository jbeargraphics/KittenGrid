/*
 * LessCss Kitten Grid 2.0
 * (released as part of the jBear LessCss Mixin Library)
 *
 * Copyright (c) 2014 Johannes Lehner, jBear Graphics - web&design
 * License: MIT license (http://www.opensource.org/licenses/mit-license.php)
 *
 *   email | email@johannes-lehner.at
 *     web | http://www.johannes-lehner.at
 *    like | http://www.facebook.com/jbeargraphics
 *  follow | https://plus.google.com/113188429852393923452
 *
 *     git | https://github.com/jbeargraphics/LessCssLibrary/KittenGrid
 *
 */


/* Base Classes */
[class^=row]
{ 
	text-align: justify;
	-ms-text-justify: distribute-all-lines;
	white-space: nowrap; // BugFix for Chrome
} 

[class^=row] > * 
{ 
	display: inline-block; 
	text-align: left;
	word-spacing: normal;
	white-space: normal; // BugFix for Chrome
	vertical-align: top;
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}



//*** Full Call (setting margin and max. amount of cols)
.KittenGrid(@arg1, @arg2, @arg3, @arg4) 
	when (@arg3) 
	and (isnumber(@arg1))
	and (isnumber(@arg2))
	and (isnumber(@arg4))
{
	@i: 1;
	
	/* Fluid Columns - Fixed Margin */
	.rows(@i, @arg1, @arg2);

	/* Helper Classes */
	.helper(@i, @arg4);
	.helper(@k, @n) when (@k <= @n) {
		.columns(@i, @k);	
		.helper(@k + 1, @n);
	}
	.helper(0, @n) {}
}

.KittenGrid(@arg1, @arg2, @arg3, @arg4) 
	when (default()) 
	and (isnumber(@arg1))
	and (isnumber(@arg2))
	and (isnumber(@arg4))
{
	@i: 1;
	
	/* Fluid Columns - Fixed Margin */
	.rows(@i, @arg1, @arg2);

	/* Helper Classes */
	.columns(@i, @arg4);
}


//*** Default values
@arg2: 8;
@arg1: 20;
@arg3: false;
@arg4: @arg2;

.KittenGrid(@m, @c, @d) when (isnumber(@m)) and (isnumber(@c)) and (isnumber(@d)) {
	@arg1: @m;
	@arg2: @c;
	@arg4: @d;
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@m, @c, @b) when (isnumber(@m)) and (isnumber(@c)) and (@b) {
	@arg1: @m;
	@arg2: @c;
	@arg3: @b;
	@arg4: @arg2 * 2; // default value: twice cols!
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@m, @b, @d) when (isnumber(@m)) and (@b) and (isnumber(@d)) {
	@arg1: @m;
	@arg3: @b;
	@arg4: @d;
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@b, @c, @d) when (@b) and (isnumber(@c)) and (isnumber(@d)) {
	@arg3: @b;
	@arg2: @c;
	@arg4: @d;
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@m, @b) when (isnumber(@m)) and (@b) {
	@arg1: @m;
	@arg3: @b;
	@arg4: @arg2 * 2; // default value: twice cols!
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@m, @c) when (isnumber(@m)) and (isnumber(@c)) {
	@arg1: @m;
	@arg2: @c;
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@b, @d) when (@b) and (isnumber(@d)) {
	@arg3: @b;
	@arg4: @d;
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@b) when (@b) {
	@arg3: @b;
	@arg4: @arg2 * 2; // default value: twice cols!
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

.KittenGrid(@m) when (isnumber(@m)) {
	@arg1: @m;
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}

//*** Default Call
.KittenGrid() {
	.KittenGrid(@arg1, @arg2, @arg3, @arg4);
}


//* Fluid Columns - Fixed Margin *//
.rows(@k, @m, @n) when (@k <= @n) {
	.row@{k}Col { word-spacing: unit( @m * @k, px); padding-right: unit( @m * (@k - 1), px); }
	.row@{k}Col > * { margin-right: unit( (@m * (@k - 1) * (-1)) - 5, px); }
	.rows(@k + 1, @m, @n);
}
.rows(0, @m, @n) {}


//* Helper Classes *//
.columns(@k, @n) when (@k <= @n) {
	.col@{k}-@{n} { width: unit(100 * @k / @n, %); }
	.columns(@k + 1, @n);
}
.columns(0, @n) {}
